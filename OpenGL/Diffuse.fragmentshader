#version 330 // OpenGL version 3.3 (minimum requirement)

in vec3 retNormal; 
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture; //Default Texture
	sampler2D specularTexture;
};

struct Light
{
	vec3 position;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
};

//Variables for refering to the structs
uniform Material material;
#define NR_LIGHTS 1
uniform Light light[NR_LIGHTS];

void main()
{
	// Early out if we have no color at this fragment position
	if (texture(material.diffuseTexture, retTexCoord).a == 0)
	{
		discard;
	}

	vec4 finalColor = vec4(0);
	for(int i = 0; i < NR_LIGHTS; i++)
	{
		vec3 lightDir = normalize(light[i].position - retFragPos); // Normalize, for correct dot product results
		float lambertianStrength = dot(lightDir, retNormal); // Add lambertian Lighting
		vec3 refl = reflect(-lightDir, retNormal); // Reflect wants lightDir to be from pizel to source hence -ve
		float specularStrength = pow(max(dot(retViewDirection, refl), 0.0f), material.specularStrength); // Specular Component
	
		vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor / NR_LIGHTS;
		vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor ;
		vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor ;

		finalColor += vec4(ambient + lambertian + specular, 1.0f); // Calculate final color

	}
	
	FragColor = finalColor;
}