#version 330 // OpenGL version 3.3 (minimum requirement)

in vec3 retNormal; 
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture; //Default Texture
	sampler2D specularTexture;
};

struct Light
{
	vec3 position;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;

	float constant;
	float linear;
	float quadratic;
};

//Variables for refering to the structs
uniform Material material;
uniform Light light;

void main()
{
	vec3 lightDir = normalize(light.position - retFragPos); // Normalize, for correct dot product results
	float lambertianStrength = dot(lightDir, retNormal); // Add Lambertian lighting
	vec3 refl = reflect(-lightDir, retNormal); // Reflect wants lightDir to be from pizel to source hence -ve
	float specularStrength = pow(max(dot(retViewDirection, refl), 0.0f), material.specularStrength);
	float distance = length(light.position - retFragPos);
	float att = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); // Calculating attenuation or fall off for light
	
	vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor;
	vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light.diffuseColor * att;
	vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light.specularColor * att;

	FragColor = vec4(ambient + lambertian + specular, 1.0f); // Calculate final color
}